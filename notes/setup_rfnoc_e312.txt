Install fresh ubuntu 18.04 from USB
Run the first batch of software update and reboot
Change default shell to be bash, not dash.  It's a littel heavier, but we need it.
$ sudo dpkg-reconfigure dash

Set my computer IP address to 192.168.10.222
e312 address is 192.168.10.184

Update package manager index to download some tools
$ sudo apt update

Change desktop to dark mode.  save our eyes.
$ sudo apt install gnome-tweaks
$ gnome-tweaks
Appearance > Adwaita-dark

Install a Sublime text editor.
$ wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -
$ echo "deb https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.list
Tell package manager to look for new software at this path from sublime
$ sudo apt update
$ sudo apt install sublime-text

Compare dependencies lists from 

* https://kb.ettus.com/Building_and_Installing_the_USRP_Open-Source_Toolchain_(UHD_and_GNU_Radio)_on_Linux
(has a note about ubuntu 18.04 specifically)

* https://kb.ettus.com/Software_Development_on_the_E3xx_USRP_-_Building_RFNoC_UHD_/_GNU_Radio_/_gr-ettus_from_Source
(doesn't specify ubuntu version)

$ sudo apt install git swig cmake doxygen build-essential libboost-all-dev libtool libusb-dev libusb-1.0-0 libusb-1.0-0-dev libudev-dev libncurses5 libncurses5-dev libncurses5-dbg libfftw3-bin libfftw3-dev libfftw3-doc libcppunit-1.14-0 libcppunit-dev libcppunit-doc ncurses-bin cpufrequtils qt4-bin-dbg qt4-default qt4-doc libqt4-dev libqt4-dev-bin qt4-dev-tools  libqwt6abi1 ncurses-bin libfontconfig1-dev libxrender-dev libpulse-dev g++ automake autoconf libtool fort77 libsdl1.2-dev ccache libgsl-dev libqwtplot3d-qt5-dev  libqwt-dev libxi-dev gtk2-engines-pixbuf r-base-dev liborc-0.4-0 liborc-0.4-dev libasound2-dev libzmq3-dev libzmq5 libcomedi-dev libgps-dev libgps23 gpsd gpsd-clients python python-dev python-pip python-numpy python-numpy-doc python-numpy-dbg python-scipy python-docutils python-qt4 python-qt4-dbg python-qt4-dev python-qt4-doc python-wxgtk3.0 python-opengl python-cheetah python-mako python-lxml python-qwt5-qt4 python-tk python-gtk2 libcanberra-gtk-module python-requests python-sphinx python-zmq python-six python-gps python-setuptools pyqt4-dev-tools sshfs sublime-text screen net-tools


Now that a decent list of pacakges are installed, run the armv7 toolchain SDK script (it requires python.  thats why we waited until now to install)

Install SDK
$ sh oecore-x86_64-armv7ahf-vfp-neon-toolchain-nodistro.0.sh 

It asks for target directory.
~/prefix

After SDK is setup.  
$ cd ~/prefix/sysroots
$ ls
 ---> armv7ahf-vfp-neon-oe-linux-gnueabi  
 ---> x86_64-oesdk-linux
browse and see python installations.
cd ~/prefix/sysroots/x86_64-oesdk-linux/usr/bin
./python --version
 ---> v 2.7.9

# Install additional python libraries to sysroot x86 where CMAKE expects to find them.
pip install --install-option="--prefix=/home/ssarris/prefix/sysroots/x86_64-oesdk-linux/usr" --ignore-installed requests six numpy==1.13.3

# Download source repositories
cd ~/prefix/src/
git clone --recursive https://github.com/EttusResearch/uhd.git
git clone --recursive https://github.com/EttusResearch/gr-ettus.git
git clone --recursive https://github.com/gnuradio/gnuradio.git
git clone --recursive https://github.com/spiro-sarris/sdr.git

## checkout current release branch of UHD.
$ cd ~/prefix/src/uhd/ 
$ git checkout v3.13.1.0

## Create directories for both ARM and X86 build output
cd host
mkdir build_arm_3.14.0.0
mkdir build_x86_3.14.0.0

$ cd ~/prefix/src/gnuradio/
## checkout current release branch of UHD.
$ git checkout v3.7.13.4

## Create directories for both ARM and X86 build output
mkdir build_arm_3.7.13.4
mkdir build_x86_3.7.134.

# Set environment variables for armv7 build
$ source ~/prefix/environment-setup-armv7ahf-vfp-neon-oe-linux-gnueabi

# Confirm by checking one example environment variable $CC
echo $CC
```
arm-oe-linux-gnueabi-gcc -march=armv7-a -mfloat-abi/usr/bin/python =hard -mfpu=neon --sysroot=/home/ssarris/prefix/sysroots/armv7ahf-vfp-neon-oe-linux-gnueabi
```
# Compile UHD
# Prepare compile with CMAKE to read all options.
# disable some of the Ettus USRP devices because we don't want to waste time to compile software for those devices we don't use in ARM embedded mode.  Route text output to log-cmake.txt

cd ~/prefix/src/uhd/host/build_arm_3.14.0.0/
$ cmake -DCMAKE_TOOLCHAIN_FILE=../host/cmake/Toolchains/oe-sdk_cross.cmake -DCMAKE_INSTALL_PREFIX=/usr -DENABLE_PYTHON_API=OFF -DENABLE_GPSD=ON -DENABLE_B100=OFF -DENABLE_B200=OFF -DENABLE_E300=ON -DENABLE_USRP1=OFF -DENABLE_USRP2=OFF -DENABLE_X300=OFF -DENABLE_N230=OFF -DENABLE_N300=ON -DENABLE_OCTOCLOCK=OFF -DENABLE_E320=OFF -DENABLE_RFNOC=ON .. | tee log-cmake.txt

## Seems impossible to install numpy in a way that will be recognized by this old version of python 2.7.9.  Try without DENABLE_PYTHON_API


$ make
# Install to  host machine SDK so it can be found by gnuradio, gr-ettus
cd ~/prefix/src/uhd/host/build_arm_3.14.0.0/
$ make install DESTDIR=~/prefix/sysroots/armv7ahf-vfp-neon-oe-linux-gnueabi

Build gnuradio and install to SDK

cd ~/prefix/src/gnuradio/
$ mkdir build-armv7-e312-3.7.13.4
$ cd build-armv7-e312-3.7.13.4/
$ cmake -Wno-dev -DCMAKE_TOOLCHAIN_FILE=../cmake/Toolchains/oe-sdk_cross.cmake -DCMAKE_INSTALL_PREFIX=/usr -DENABLE_GR_VOCODER=OFF -DENABLE_GR_ATSC=OFF -DENABLE_GR_DTV=OFF -DENABLE_DOXYGEN=OFF .. | tee log-cmake.txt

$ make
$ make install DESTDIR=~/prefix/sysroots/armv7ahf-vfp-neon-oe-linux-gnueabi

Build gr-ettus and install to the SDK
$ cmake -DCMAKE_TOOLCHAIN_FILE=~/prefix/src/gnuradio/cmake/Toolchains/oe-sdk_cross.cmake -DCMAKE_INSTALL_PREFIX=/usr .. | tee log-cmake.txt

$ make

$ make install DESTDIR=~/prefix/sysroots/armv7ahf-vfp-neon-oe-linux-gnueabi

I see this line
Installing: /home/sdrdev/prefix/sysroots/armv7ahf-vfp-neon-oe-linux-gnueabi/usr/lib/python2.7/site-packages/ettus/__init__.py

that is a good sign.  means that I will have the ettus module 

-- play around a little bit more with how to get old numpy installed to x86 directory. but no success.  install all to USRP.  Then start rebuilding host stuff.  



==== INSTALL 3 packages over SSHFS
$ mkdir ~/mnte312
$ sshfs root@e312:/ ~/mnte312
$ cd ~/prefix/src/uhd/host/build-armv7-e312-3.13.1.0
$ make install DESTDIR=~/mnte312

$ cd ~/prefix/src/gnuradio/build-armv7-e312-3.7.13.4
$ make install DESTDIR=~/mnte312

$ cd ~/prefix/src/gr-ettus/build-armv7-e312-master-dcb780b77a114a265bb355fdba4f24033c3412c4
$ make install DESTDIR=~/mnte312

Now login and try to import ettus module in python.  Looks like it imports OK!
>>> zmq.zmq_version()
'4.0.4'

==== START Building and installing for host system
## build UHD for host system

$ cd ~/prefix/src/uhd/host/
$ mkdir build-x86_64-ubuntu18-3.13.1.0/
$ cd build-x86_64-ubuntu18-3.13.1.0/
$ cmake -DENABLE_GPSD=OFF -DENABLE_B100=OFF -DENABLE_B200=ON -DENABLE_E300=ON -DENABLE_USRP1=OFF -DENABLE_USRP2=ON -DENABLE_X300=ON -DENABLE_N230=ON -DENABLE_N300=ON -DENABLE_OCTOCLOCK=ON -DENABLE_E320=ON -DENABLE_RFNOC=ON -DENABLE_PYTHON_API=ON .. | tee log-cmake.txt

$ make
$ sudo make install
$ sudo ldconfig

### build gnuradio for host system
$ cd ~/prefix/src/gnuradio
$ mkdir build-x86_64-ubuntu18-3.7.13.4
$ cd build-x86_64-ubuntu18-3.7.13.4
$ cmake .. | tee log-cmake.txt	
$ make
$ sudo make install
$ sudo ldconfig

$ cd ~/prefix/src/gr-ettus
$ mkdir build-x86_64-ubuntu18-master-dcb780b77a114a265bb355fdba4f24033c3412c4
$ cd build-x86_64-ubuntu18-master-dcb780b77a114a265bb355fdba4f24033c3412c4
$ cmake ..
$ make
$ sudo make install
$ sudo ldconfig
```
>>> zmq.zmq_version()
'4.2.5'
At least is it is the same major revision as 4.0.4 on the E312.  hope it works.

## Test some basic UHD functions:
root@ettus-e3xx-sg3:~# uhd_find_devices 
[INFO] [UHD] linux; GNU C++ version 4.9.2; Boost_105700; UHD_3.14.0.HEAD-0-g6875d061
--------------------------------------------------
-- UHD Device 0
--------------------------------------------------
Device Address:
    serial: 312EDFA
    name: 
    node: /dev/axi_fpga
    product: E3XX SG3
    type: e3x0


## Add new FPGA images to path on E312
ssarris@ssarris-MacBookPro:/usr/local/share/uhd/images$ scp usrp_e3* root@e312:/usr/share/uhd/images/

```
usrp_e310_fpga.bin                      100% 3951KB  16.5MB/s   00:00    
usrp_e310_fpga.bit                      100% 3951KB  16.6MB/s   00:00    
usrp_e310_fpga.rpt                      100%   24KB   4.1MB/s   00:00    
usrp_e310_fpga_sg3.bin                  100% 3951KB  16.8MB/s   00:00    
usrp_e310_fpga_sg3.bit                  100% 3951KB  16.8MB/s   00:00    
usrp_e310_fpga_sg3.rpt                  100%   24KB   3.3MB/s   00:00    
usrp_e3xx_fpga_idle.bin                 100% 3951KB  16.8MB/s   00:00    
usrp_e3xx_fpga_idle.bit                 100% 3951KB  16.6MB/s   00:00    
usrp_e3xx_fpga_idle.rpt                 100%   19KB   3.1MB/s   00:00    
usrp_e3xx_fpga_idle_sg3.bin             100% 3951KB  16.8MB/s   00:00    
usrp_e3xx_fpga_idle_sg3.bit             100% 3951KB  16.6MB/s   00:00    
usrp_e3xx_fpga_idle_sg3.rpt             100%   19KB   3.8MB/s   00:00  
```

```
uhd_usrp_probe       
[INFO] [UHD] linux; GNU C++ version 4.9.2; Boost_105700; UHD_3.14.0.HEAD-0-g6875d061
[INFO] [E300] Loading FPGA image: /usr/share/uhd/images/usrp_e310_fpga_sg3.bit...
[INFO] [E300] FPGA image loaded
[INFO] [E300] Detecting internal GPS 
.... [INFO] [E300] GPSDO found
[INFO] [E300] Initializing core control (global registers)...

[INFO] [E300] Performing register loopback test... 
[INFO] [E300] Register loopback test passed
[INFO] [0/Radio_0] Initializing block control (NOC ID: 0x12AD100000000000)
[INFO] [0/DDC_0] Initializing block control (NOC ID: 0xDDC0000000000000)
[INFO] [0/DUC_0] Initializing block control (NOC ID: 0xD0C0000000000002)
  _____________________________________________________
 /
|       Device: E-Series Device
|     _____________________________________________________
|    /
|   |       Mboard: E3XX SG3
|   |   product: 30675
|   |   revision: 6
|   |   serial: 312EDFA
|   |   mac-addr: 00:80:2f:17:d1:2a
|   |   FPGA Version: 255.0
|   |   FPGA git hash: 4bc2c6f
|   |   RFNoC capable: Yes
|   |   
|   |   Time sources:  none, internal, external, gpsdo
|   |   Clock sources: internal
|   |   Sensors: temp, ref_locked, gps_locked, gps_time, gps_position, gps_gpgga, gps_gprmc
|   |     _____________________________________________________
|   |    /
|   |   |       RX DSP: 0
|   |   |   
|   |   |   Freq range: 0.000 to 0.000 MHz
|   |     _____________________________________________________
|   |    /
|   |   |       RX DSP: 1
|   |   |   
|   |   |   Freq range: 0.000 to 0.000 MHz
|   |     _____________________________________________________
|   |    /
|   |   |       RX Dboard: A
|   |   |   ID: E310 MIMO XCVR (0x0110)
|   |   |   Serial: 312D66B
|   |   |     _____________________________________________________
|   |   |    /
|   |   |   |       RX Frontend: A
|   |   |   |   Name: FE-RX2
|   |   |   |   Antennas: TX/RX, RX2
|   |   |   |   Sensors: temp, rssi, lo_locked
|   |   |   |   Freq range: 50.000 to 6000.000 MHz
|   |   |   |   Gain range PGA: 0.0 to 76.0 step 1.0 dB
|   |   |   |   Bandwidth range: 200000.0 to 56000000.0 step 0.0 Hz
|   |   |   |   Connection Type: IQ
|   |   |   |   Uses LO offset: No
|   |   |     _____________________________________________________
|   |   |    /
|   |   |   |       RX Frontend: B
|   |   |   |   Name: FE-RX1
|   |   |   |   Antennas: TX/RX, RX2
|   |   |   |   Sensors: temp, rssi, lo_locked
|   |   |   |   Freq range: 50.000 to 6000.000 MHz
|   |   |   |   Gain range PGA: 0.0 to 76.0 step 1.0 dB
|   |   |   |   Bandwidth range: 200000.0 to 56000000.0 step 0.0 Hz
|   |   |   |   Connection Type: IQ
|   |   |   |   Uses LO offset: No
|   |   |     _____________________________________________________
|   |   |    /
|   |   |   |       RX Codec: A
|   |   |   |   Name: E3x0 RX dual ADC
|   |   |   |   Gain Elements: None
|   |     _____________________________________________________
|   |    /
|   |   |       TX DSP: 0
|   |   |   
|   |   |   Freq range: 0.000 to 0.000 MHz
|   |     _____________________________________________________
|   |    /
|   |   |       TX DSP: 1
|   |   |   
|   |   |   Freq range: 0.000 to 0.000 MHz
|   |     _____________________________________________________
|   |    /
|   |   |       TX Dboard: A
|   |   |   ID: E310 MIMO XCVR (0x0110)
|   |   |   Serial: 312D66B
|   |   |     _____________________________________________________
|   |   |    /
|   |   |   |       TX Frontend: A
|   |   |   |   Name: FE-TX2
|   |   |   |   Antennas: TX/RX
|   |   |   |   Sensors: temp, lo_locked
|   |   |   |   Freq range: 50.000 to 6000.000 MHz
|   |   |   |   Gain range PGA: 0.0 to 89.8 step 0.2 dB
|   |   |   |   Bandwidth range: 200000.0 to 56000000.0 step 0.0 Hz
|   |   |   |   Connection Type: IQ
|   |   |   |   Uses LO offset: No
|   |   |     _____________________________________________________
|   |   |    /
|   |   |   |       TX Frontend: B
|   |   |   |   Name: FE-TX1
|   |   |   |   Antennas: TX/RX
|   |   |   |   Sensors: temp, lo_locked
|   |   |   |   Freq range: 50.000 to 6000.000 MHz
|   |   |   |   Gain range PGA: 0.0 to 89.8 step 0.2 dB
|   |   |   |   Bandwidth range: 200000.0 to 56000000.0 step 0.0 Hz
|   |   |   |   Connection Type: IQ
|   |   |   |   Uses LO offset: No
|   |   |     _____________________________________________________
|   |   |    /
|   |   |   |       TX Codec: A
|   |   |   |   Name: E3x0 TX dual DAC
|   |   |   |   Gain Elements: None
|   |     _____________________________________________________
|   |    /
|   |   |       RFNoC blocks on this device:
|   |   |   
|   |   |   * Radio_0
|   |   |   * DDC_0
|   |   |   * DUC_0
```

# Test some existing flowgraphs without change from last time.
rfnoc_rx_e3.py works as expected
so does demo_record_e3.py (using multi_usrp# p with legacy_compat)

# Try to use the DDC block in rfnoc_rx_e3 and see if I get the same frustrating errors as before about mismatched data sps or whatever it was.
	
No errors.  It just works!

Now try higher sample rate. Seems to work OK at 1 MHz.  leave it alone for now.
----------------------------------------------
20190522
----------------------------------------------
Made new FPGA image on 6 May with components for fosphor. 
Unfortunately, the FIFO blocks don't fit on the image.  I imagine the
fpga base image for UHD 3.14 grew bigger and can't fit all the extra stuff.

copy the image over
scp e300_fosphor.* root@e312:/usr/share/uhd/images

test the image with uhd_usrp probe
uhd_usrp_probe --args="fpga=e300_fosphor.bit"

|   |    /
|   |   |       RFNoC blocks on this device:
|   |   |   
|   |   |   * Radio_0
|   |   |   * FFT_0
|   |   |   * Window_0
|   |   |   * fosphor_0


Looks good!  shows the blocks for fosphor

edit the IP addresses in both the USRP foshpor and the host fosphor to match
192.168.10.222 for host
192.168.10.184 for usrp
add fpga="e300_fosphor.bit" in device3 args

compile in gnuradio-companion.  copy the .py file over to the usrp
~/src/gr-ettus/examples/rfnoc$ scp rfnoc_fosphor_network_usrp.py root@e312:/home/root/sdr/

... looking good so far with startup on correct fpga image and finds window and fft.  
But doesn't find FIFO block because it is not in the FPGA image.  we knew that already.
becuase it doesn't fit in the FPGA image with the other crap from UHD 3.14.  

Remove FIFO blocks from flowgraph and see if it runs.  Maybe the ZMQ system can handle the traffic.

but doesn't 